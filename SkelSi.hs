module SkelSi where

-- Haskell module generated by the BNF converter

import AbsSi
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog stms  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  DFunc type' id params stms  -> failure x
  DVar type' id  -> failure x
  DInit type' id exp  -> failure x
  DAuto id exp  -> failure x
  DArr type' id exp  -> failure x
  DStruct id decs  -> failure x


transParam :: Param -> Result
transParam x = case x of
  Param paramtype id  -> failure x


transParamType :: ParamType -> Result
transParamType x = case x of
  ParamTypeVal type'  -> failure x
  ParamTypeRef type'  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SDec dec  -> failure x
  SExp exp  -> failure x
  SBlock stms  -> failure x
  SIf exp stm  -> failure x
  SIfElse exp stm1 stm2  -> failure x
  SWhile exp stm  -> failure x
  SFor dec exp1 exp2 stm3  -> failure x
  SRet  -> failure x
  SRetExp exp  -> failure x
  SPrint exp  -> failure x
  SPrintLn exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EAss var exp  -> failure x
  EIncL var  -> failure x
  EIncR var  -> failure x
  EDecL var  -> failure x
  EDecR var  -> failure x
  EAddAss var exp  -> failure x
  ESubAss var exp  -> failure x
  EMulAss var exp  -> failure x
  EDivAss var exp  -> failure x
  EModAss var exp  -> failure x
  ENot exp  -> failure x
  EAnd exp1 exp2  -> failure x
  EOr exp1 exp2  -> failure x
  EEq exp1 exp2  -> failure x
  ENeq exp1 exp2  -> failure x
  ELt exp1 exp2  -> failure x
  EElt exp1 exp2  -> failure x
  EGt exp1 exp2  -> failure x
  EEgt exp1 exp2  -> failure x
  EConc exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  EMod exp1 exp2  -> failure x
  EInt n  -> failure x
  ETrue  -> failure x
  EFalse  -> failure x
  EChar c  -> failure x
  EStr str  -> failure x
  EVar var  -> failure x
  ECall var exps  -> failure x
  EFunc type' params stms  -> failure x
  EArr exps  -> failure x
  EIntToChar exp  -> failure x
  ECharToInt exp  -> failure x


transType :: Type -> Result
transType x = case x of
  TInt  -> failure x
  TBool  -> failure x
  TChar  -> failure x
  TString  -> failure x
  TVoid  -> failure x
  TArr type'  -> failure x
  TStruct id  -> failure x
  TFunc type' paramtypes  -> failure x


transVar :: Var -> Result
transVar x = case x of
  VarArr var exp  -> failure x
  VarStruct var id  -> failure x
  VarIdent id  -> failure x



