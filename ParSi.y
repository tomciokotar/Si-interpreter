-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParSi where
import AbsSi
import LexSi
import ErrM

}

%name pProgram Program
%name pListStm ListStm
%name pListDec1 ListDec1
%name pListParam ListParam
%name pListParamType ListParamType
%name pListExp ListExp
%name pDec1 Dec1
%name pDec Dec
%name pParam Param
%name pParamType ParamType
%name pStm Stm
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pType Type
%name pVar Var
%name pVar1 Var1
%name pVar2 Var2

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!=' { PT _ (TS _ 1) }
 '%' { PT _ (TS _ 2) }
 '%=' { PT _ (TS _ 3) }
 '&' { PT _ (TS _ 4) }
 '&&' { PT _ (TS _ 5) }
 '(' { PT _ (TS _ 6) }
 '(char)' { PT _ (TS _ 7) }
 '(int)' { PT _ (TS _ 8) }
 ')' { PT _ (TS _ 9) }
 '*' { PT _ (TS _ 10) }
 '**' { PT _ (TS _ 11) }
 '*=' { PT _ (TS _ 12) }
 '+' { PT _ (TS _ 13) }
 '++' { PT _ (TS _ 14) }
 '+=' { PT _ (TS _ 15) }
 ',' { PT _ (TS _ 16) }
 '-' { PT _ (TS _ 17) }
 '--' { PT _ (TS _ 18) }
 '-=' { PT _ (TS _ 19) }
 '.' { PT _ (TS _ 20) }
 '/' { PT _ (TS _ 21) }
 '/=' { PT _ (TS _ 22) }
 ';' { PT _ (TS _ 23) }
 '<' { PT _ (TS _ 24) }
 '<=' { PT _ (TS _ 25) }
 '=' { PT _ (TS _ 26) }
 '==' { PT _ (TS _ 27) }
 '>' { PT _ (TS _ 28) }
 '>=' { PT _ (TS _ 29) }
 '[' { PT _ (TS _ 30) }
 '[]' { PT _ (TS _ 31) }
 ']' { PT _ (TS _ 32) }
 'auto' { PT _ (TS _ 33) }
 'bool' { PT _ (TS _ 34) }
 'char' { PT _ (TS _ 35) }
 'else' { PT _ (TS _ 36) }
 'false' { PT _ (TS _ 37) }
 'for' { PT _ (TS _ 38) }
 'if' { PT _ (TS _ 39) }
 'int' { PT _ (TS _ 40) }
 'print' { PT _ (TS _ 41) }
 'println' { PT _ (TS _ 42) }
 'return' { PT _ (TS _ 43) }
 'string' { PT _ (TS _ 44) }
 'struct' { PT _ (TS _ 45) }
 'true' { PT _ (TS _ 46) }
 'void' { PT _ (TS _ 47) }
 'while' { PT _ (TS _ 48) }
 '{' { PT _ (TS _ 49) }
 '||' { PT _ (TS _ 50) }
 '}' { PT _ (TS _ 51) }
 '~' { PT _ (TS _ 52) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListStm { Prog (reverse $1) } 


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | ListStm Stm { flip (:) $1 $2 }


ListDec1 :: { [Dec] }
ListDec1 : {- empty -} { [] } 
  | ListDec1 Dec1 ';' { flip (:) $1 $2 }


ListParam :: { [Param] }
ListParam : {- empty -} { [] } 
  | Param { (:[]) $1 }
  | Param ',' ListParam { (:) $1 $3 }


ListParamType :: { [ParamType] }
ListParamType : {- empty -} { [] } 
  | ParamType { (:[]) $1 }
  | ParamType ',' ListParamType { (:) $1 $3 }


ListExp :: { [Exp] }
ListExp : {- empty -} { [] } 
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }


Dec1 :: { Dec }
Dec1 : Type Ident '(' ListParam ')' '{' ListStm '}' { DFunc $1 $2 $4 (reverse $7) } 
  | Type Ident { DVar $1 $2 }
  | Type Ident '=' Exp { DInit $1 $2 $4 }
  | 'auto' Ident '=' Exp { DAuto $2 $4 }
  | Type Ident '[' Exp ']' { DArr $1 $2 $4 }


Dec :: { Dec }
Dec : 'struct' Ident '{' ListDec1 '}' { DStruct $2 (reverse $4) } 
  | Dec1 { $1 }


Param :: { Param }
Param : ParamType Ident { Param $1 $2 } 


ParamType :: { ParamType }
ParamType : Type { ParamTypeVal $1 } 
  | Type '&' { ParamTypeRef $1 }


Stm :: { Stm }
Stm : Dec ';' { SDec $1 } 
  | Exp ';' { SExp $1 }
  | '{' ListStm '}' { SBlock (reverse $2) }
  | 'if' '(' Exp ')' Stm { SIf $3 $5 }
  | 'if' '(' Exp ')' Stm 'else' Stm { SIfElse $3 $5 $7 }
  | 'while' '(' Exp ')' Stm { SWhile $3 $5 }
  | 'for' '(' Dec ';' Exp ';' Exp ')' Stm { SFor $3 $5 $7 $9 }
  | 'return' ';' { SRet }
  | 'return' Exp ';' { SRetExp $2 }
  | 'print' Exp ';' { SPrint $2 }
  | 'println' Exp ';' { SPrintLn $2 }


Exp :: { Exp }
Exp : Var '=' Exp { EAss $1 $3 } 
  | '++' Var { EIncL $2 }
  | Var '++' { EIncR $1 }
  | '--' Var { EDecL $2 }
  | Var '--' { EDecR $1 }
  | Var '+=' Exp { EAddAss $1 $3 }
  | Var '-=' Exp { ESubAss $1 $3 }
  | Var '*=' Exp { EMulAss $1 $3 }
  | Var '/=' Exp { EDivAss $1 $3 }
  | Var '%=' Exp { EModAss $1 $3 }
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : '~' Exp1 { ENot $2 } 
  | Exp1 '&&' Exp2 { EAnd $1 $3 }
  | Exp1 '||' Exp2 { EOr $1 $3 }
  | Exp2 { $1 }


Exp2 :: { Exp }
Exp2 : Exp3 '==' Exp3 { EEq $1 $3 } 
  | Exp3 '!=' Exp3 { ENeq $1 $3 }
  | Exp3 '<' Exp3 { ELt $1 $3 }
  | Exp3 '<=' Exp3 { EElt $1 $3 }
  | Exp3 '>' Exp3 { EGt $1 $3 }
  | Exp3 '>=' Exp3 { EEgt $1 $3 }
  | Exp3 { $1 }


Exp3 :: { Exp }
Exp3 : Exp3 '**' Exp4 { EConc $1 $3 } 
  | Exp4 { $1 }


Exp4 :: { Exp }
Exp4 : Exp4 '+' Exp5 { EAdd $1 $3 } 
  | Exp4 '-' Exp5 { ESub $1 $3 }
  | Exp5 { $1 }


Exp5 :: { Exp }
Exp5 : Exp5 '*' Exp6 { EMul $1 $3 } 
  | Exp5 '/' Exp6 { EDiv $1 $3 }
  | Exp5 '%' Exp6 { EMod $1 $3 }
  | Exp6 { $1 }


Exp6 :: { Exp }
Exp6 : Integer { EInt $1 } 
  | 'true' { ETrue }
  | 'false' { EFalse }
  | Char { EChar $1 }
  | String { EStr $1 }
  | Var { EVar $1 }
  | Var '(' ListExp ')' { ECall $1 $3 }
  | '(' Type ';' ListParam ')' '{' ListStm '}' { EFunc $2 $4 (reverse $7) }
  | '{' ListExp '}' { EArr $2 }
  | '(char)' Exp { EIntToChar $2 }
  | '(int)' Exp { ECharToInt $2 }
  | '(' Exp ')' { $2 }


Type :: { Type }
Type : 'int' { TInt } 
  | 'bool' { TBool }
  | 'char' { TChar }
  | 'string' { TString }
  | 'void' { TVoid }
  | Type '[]' { TArr $1 }
  | 'struct' Ident { TStruct $2 }
  | '(' Type ';' ListParamType ')' { TFunc $2 $4 }


Var :: { Var }
Var : Var '[' Exp ']' { VarArr $1 $3 } 
  | Var1 { $1 }


Var1 :: { Var }
Var1 : Var '.' Ident { VarStruct $1 $3 } 
  | Var2 { $1 }


Var2 :: { Var }
Var2 : Ident { VarIdent $1 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

